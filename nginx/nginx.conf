user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
  server {
    listen 80;
    #listen 443 ssl;

    server_name         localhost;
    #ssl_certificate     localhost.crt;
    #ssl_certificate_key localhost.key;

    proxy_busy_buffers_size   512k;
    proxy_buffers   4 512k;
    proxy_buffer_size   256k;
  
    location /oauth2/ {
      proxy_pass       http://oidc:4180;
      proxy_set_header Host                    $host;
      proxy_set_header X-Real-IP               $remote_addr;
      proxy_set_header X-Scheme                $scheme;
      proxy_set_header X-Auth-Request-Redirect $request_uri;
    }
  
    location = /oauth2/auth {
      proxy_pass       http://oidc:4180;
      proxy_set_header Host             $host;
      proxy_set_header X-Real-IP        $remote_addr;
      proxy_set_header X-Scheme         $scheme;
      # nginx auth_request includes headers but not body
      proxy_set_header Content-Length   "";
      proxy_pass_request_body           off;
    }
  
    location / {
      auth_request /oauth2/auth;
      error_page 401 = /oauth2/sign_in;
  
      # pass information via X-User and X-Email headers to backend,
      # requires running with --set-xauthrequest flag
      # auth_request_set $user   $upstream_http_x_auth_request_user;
      # auth_request_set $email  $upstream_http_x_auth_request_email;
      # proxy_set_header X-User  $user;
      # proxy_set_header X-Email $email;
  
      # if you enabled --pass-access-token, this will pass the token to the backend
      auth_request_set $token  $upstream_http_x_auth_request_access_token;
      proxy_set_header X-Access-Token $token;
  
      # if you enabled --cookie-refresh, this is needed for it to work with auth_request
      auth_request_set $auth_cookie $upstream_http_set_cookie;
      add_header Set-Cookie $auth_cookie;
  
      # When using the --set-authorization-header flag, some provider's cookies can exceed the 4kb
      # limit and so the OAuth2 Proxy splits these into multiple parts.
      # Nginx normally only copies the first `Set-Cookie` header from the auth_request to the response,
      # so if your cookies are larger than 4kb, you will need to extract additional cookies manually.
      auth_request_set $auth_cookie_name_upstream_1 $upstream_cookie_auth_cookie_name_1;
  
      # Extract the Cookie attributes from the first Set-Cookie header and append them
      # to the second part ($upstream_cookie_* variables only contain the raw cookie content)
      if ($auth_cookie ~* "(; .*)") {
          set $auth_cookie_name_0 $auth_cookie;
          set $auth_cookie_name_1 "auth_cookie_name_1=$auth_cookie_name_upstream_1$1";
      }
  
      # Send both Set-Cookie headers now if there was a second part
      if ($auth_cookie_name_upstream_1) {
          add_header Set-Cookie $auth_cookie_name_0;
          add_header Set-Cookie $auth_cookie_name_1;
      }
  
      # Set basic auth headers with: echo -n "kasm_user:password" | base64
      # proxy_set_header Authorization "Basic a2FzbV91c2VyOnBhc3N3b3Jk";
      # proxy_set_header Authorization "";
      # proxy_pass https://kasm:6901/;
      proxy_pass http://app:8080/;
    }
  }
}